{"remainingRequest":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/src/pages/StarterPage.vue?vue&type=template&id=2fc6ac6c&scoped=true&","dependencies":[{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/src/pages/StarterPage.vue","mtime":1589386711702},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/cache-loader/dist/cjs.js","mtime":1572543510066},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1585572828575},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/cache-loader/dist/cjs.js","mtime":1572543510066},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/index.js","mtime":1585572828575}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}