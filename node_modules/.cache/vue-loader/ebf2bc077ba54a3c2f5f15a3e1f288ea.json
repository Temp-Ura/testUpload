{"remainingRequest":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/src/pages/StarterPage.vue?vue&type=template&id=2fc6ac6c&scoped=true&","dependencies":[{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/src/pages/StarterPage.vue","mtime":1590467789525},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lorenzotempesti/VUE_PRJ/festival-dell-amore/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}